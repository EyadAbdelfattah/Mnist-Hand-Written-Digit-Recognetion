# -*- coding: utf-8 -*-
"""Copy of HandWrittenDigitRecog.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1moirAXlVIwzjvo3-sLCdB67aKbcH2Tuo
"""

import numpy as np
import pandas as pds
import matplotlib.pyplot as plt
import os
import cv2
import tensorflow as tf
from tensorflow import keras as krs

mnist = krs.datasets.mnist

import matplotlib.pyplot as plt
from keras.datasets import mnist

# Load MNIST dataset
(x_train, y_train), (x_test, y_test) = mnist.load_data()

# Display the first 9 images in the training set
plt.figure(figsize=(10, 10))
for i in range(9):
    plt.subplot(3, 3, i + 1)  # Create a grid of 3x3
    plt.imshow(x_train[i], cmap='gray')  # Display the image in grayscale
    plt.title(f"Label: {y_train[i]}")
    plt.axis('off')  # Hide axes for a cleaner look

plt.tight_layout()
plt.show()

x_train = x_train/255.0
x_test = x_test/255.0

x_train.shape

# Calculate the mean and standard deviation of the training data
mean = np.mean(x_train)
std_dev = np.std(x_train)

print(f"Mean of the training data: {mean}")
print(f"Standard deviation of the training data: {std_dev}")

# model = krs.Sequential([
#     krs.layers.Flatten(input_shape=(28, 28)),
#     krs.layers.Dense(128, activation='relu'),
#     krs.layers.Dense(10, activation='softmax')
# ])


model = krs.Sequential([
    krs.layers.Flatten(input_shape=(28, 28)),
    krs.layers.Dense(32, activation='relu'),
    krs.layers.Dense(64, activation='relu'),
    krs.layers.Dense(32, activation='relu'),
    krs.layers.Dense(10, activation='softmax')
])

model.compile(optimizer='adam', loss = 'sparse_categorical_crossentropy', metrics = ['accuracy'])

model.summary()

epoch = 20

model.fit(x_train, y_train, epochs = epoch)

test_loss, test_acc = model.evaluate(x_test, y_test)

print("Accuracy ---> ", test_acc)
print("Loss ---> ", test_loss)

print(model.input_shape)

import os
import cv2
import numpy as np
import matplotlib.pyplot as plt
from google.colab import drive

# Mount Google Drive
drive.mount('/content/drive')

# Iterate through the files in the directory
for filename in os.listdir('/content/drive/MyDrive/digitrecog'):
    img_path = f"/content/drive/MyDrive/digitrecog/{filename}"
    img = cv2.imread(img_path, cv2.IMREAD_GRAYSCALE)

    if img is None:
        print(f"Warning: {filename} could not be loaded.")
        continue  # Skip to the next file

    img = cv2.bitwise_not(img)
    # Normalize and reshape the image
    img = img / 255.0
    # print mean, max and min values
    print(f"Mean value in {filename}: {np.mean(img)}")
    print(f"Max value in {filename}: {np.max(img)}")
    print(f"Min value in {filename}: {np.min(img)}")


    img_resized = img.reshape(1, 28, 28)

    # Predict the digit using the model
    pred = model.predict(img_resized)
    predicted_digit = np.argmax(pred)

    # Display the image and prediction
    plt.figure()
    plt.imshow(img, cmap='gray')  # Display the image in grayscale
    plt.title(f"{filename}: Predicted Digit = {predicted_digit}")
    plt.axis('off')  # Turn off the axes for better visualization
    plt.show()